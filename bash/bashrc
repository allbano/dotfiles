# =========================================================================== #
#                              Meu .bashrc                                    #
# =========================================================================== #

# If not running interactively, don't do anything
# Bash Form
## [[ "$-" != *i* ]] && return
#Posix Form
###############################################################################
case $- in
    *i*) ;;
      *) return;;
esac


# Modified xdg-user-dirs
###############################################################################
source "$HOME/.config/user-dirs.dirs"
export XDG_DATA_HOME="/home/$USER/.local/share"
export XDG_CONFIG_HOME="/home/$USER/.config"


# Exports and User Configs 
###############################################################################
export EDITOR="nvim"
export TERM="xterm-256color"
export PAGER="less -s -M -Gg"
export MANPAGER="lvim +Man!"
export LS_OPTIONS="--color=auto"
export JUPYTERLAB_DIR="$HOME/.local/share/jupyter/lab"

# This is the Dotfiles directory PATH
export DOTFILES="/home/$USER/github/dotfiles"
export DOTBASHCN="/home/$USER/github/dotfiles/bash-completion"
export DOTBASH="/home/$USER/github/dotfiles/bash"

# Sorted Path
#export PATH="$(echo -e "${PATH//:/\\n}" | sort -u | xargs | tr ' ' :)"

# Fuzzy Finder - fzf
[ -f "$HOME/.fzf.bash" ] && source "$HOME/.fzf.bash"

# If you don't want to create symbolic link, use it!
#[[ -f "${DOTBASHCN}/tmux_completion" && -r "${BASHCH}/tmux_completion" ]] && \
#    . "${DOTBASHCN}/tmux_completion"
#[[ -f "${DOTBASHCN}/doas" && -r "${BASHCH}/doas" ]] && \
#    . "${DOTBASHCN}/doas"

# Aliases definitions
###############################################################################
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
[ -f "${DOTFILES}/bash/bash_aliases" ] && source "${DOTFILES}/bash/bash_aliases"

# Shell Functions
###############################################################################
[[ -f "${DOTFILES}/bash/bash_functions" && -r "${DOTFILES}/bash/bash_functions" ]] && \
  source "${DOTFILES}/bash/bash_functions" && \
  source "${DOTFILES}/scripts/functionsInitBash"

# History Configs
# Remember: https://meleu.sh/bash-history
###############################################################################
# HISTCONTROL options
# ignorespace - eliminates commands that begin with a space history list.
# ignoredups - eliminate duplicate commands (from the current session)
# ignoreboth - Enable both ignoredups and ignorespace
# erasedups - eliminate duplicates from the whole list (I don't use it)
# export HISTCONTROL="$HISTCONTROL:erasedups"
export HISTCONTROL="ignoreboth:erasedups"

# show a timestamp in the history command output
export HISTTIMEFORMAT="%F %T$ "

# ignore the following commands
# IGNORE="$IGNORE:"
# Path's ignore
IGNORE="..:~:/etc:/usr:/var"
IGNORE="$IGNORE:github/dotfiles/"
# Ls/exa/lsd ignore
IGNORE="$IGNORE:ls:lsd:lsd -l:lsd -la:exa:ll:l:x:xx:ll ~:l ~"
# git's ignore
IGNORE="$IGNORE:gst:ga .:gp:gl:glol:glob"
# Vim, lvim, nvim ignore
IGNORE="$IGNORE:lvim:lvim ~/.bashrc:vim:vim ~/.bashrc:nvim:nvim ~/.bashrc"
# Commands ignore
IGNORE="$IGNORE:history:history *:his:his *"
IGNORE="$IGNORE:pwd:bg:fg:ua:ud:uy:ur:exit:man *"
IGNORE="$IGNORE:htop:nvtop:bashtop:du:ncdu:dust:cargo:ip -c a"
IGNORE="$IGNORE:neofetch:lspci:lsusb:lsblk:lsblk -f"
IGNORE="$IGNORE:alias:alias *:. ~/.bashrc"
IGNORE="$IGNORE:doas systemctl status *"
# compilation ignore
IGNORE="$IGNORE:make:make *"
# python ignore
IGNORE="$IGNORE:py3a:py3d"
# frameworks ignore
IGNORE="$IGNORE:nvm version:ng version:npm version"
export HISTIGNORE="$IGNORE"

# append last command to the history right before next prompt
#[[ "${PROMPT_COMMAND[*]}" != *'history -a'* ]] \
#  && export PROMPT_COMMAND+=('history -a')
PROMPT_COMMAND="history -a; history -n; $PROMPT_COMMAND" # immeditely write on history

# Warning: This file is sinchronized with the file
# in the directory $HOME/github/dotfiles/bash/history_archnote
HISTFILE="$HOME/.bash_history"
export HISTSIZE=
export HISTFILESIZE=

# Shell Options 
###############################################################################
# set -o vi

# Bash Options 
###############################################################################
shopt -s histappend histreedit histverify
shopt -s expand_aliases
shopt -s checkwinsize
shopt -s autocd # change to named directory
shopt -s cdspell # autocorrects ced misspellings
shopt -s cmdhist # save multi-line commands in history as single line
# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s dotglob
shopt -s login_shell # use bash shell as login shell
shopt -s extglob

#ignore upper and lowercase when TAB completion
#bind 'set completion-ignore-case on'




# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
# if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
#    debian_chroot=$(cat /etc/debian_chroot)
# fi

# PS1 Construction 
###############################################################################
FMT_BOLD="\[\e[1m\]"
FMT_DIM="\[\e[2m\]"
FMT_RESET="\[\e[0m\]"
FMT_UNBOLD="\[\e[22m\]"
FMT_UNDIM="\[\e[22m\]"
# Foreground Colors
FG_BLACK="\[\e[1;30m\]"
FG_RED="\[\e[1;31m\]"
FG_GREEN="\[\e[1;32m\]"
FG_YELLOW="\[\e[1;33m\]"
FG_BLUE="\[\e[1;34m\]"
FG_PURPLE="\[\e[1;35m\]"
FG_CYAN="\[\e[1;36m\]"
FG_WHITE="\[\e[97m\]"
FG_AZUL_VIVO="\[\e[1;96m\]"

#FG_WHITE="\[\e[97m\]"
# Background Colors
BG_BLACK="\[\e[40m\]"
BG_BLUE="\[\e[44m\]"
BG_CYAN="\[\e[46m\]"
BG_GREEN="\[\e[42m\]"
BG_MAGENTA="\[\e[45m\]"
BG_YELLOW="\[\e[43m\]"
BG_GREY="\[\e[48;5;242m\]"
BG_GREY10="\[\e[48;5;239m\]"

DES[0]="\342\224\214\342\224\200" # Linha de canto
DES[1]="\342\224\224\342\224\200\342\224\200\342\225\274" # Linha e ponto
DES[2]="\342\234\227" # Sinal de erro
DES[3]="\342\224\200" # Linha horizontal


PS1="\n${FG_WHITE}${DES[0]}" # begin arrow to prompt
PS1+="${BG_GREY10}${FG_CYAN} \u${FG_WHITE}@${FG_YELLOW}\H " # print username
PS1+="${BG_BLUE}${FG_YELLOW} \w " # print directory
PS1+="${BG_GREY10}${FG_WHITE} " # end DIRECTORY container / begin FILES container
PS1+="[\$(find . -mindepth 1 -maxdepth 1 -type d | wc -l)]D " # print number of folders
PS1+="[\$(find . -mindepth 1 -maxdepth 1 -type f | wc -l)]F " # print number of files
PS1+="[\$(find . -mindepth 1 -maxdepth 1 -type l | wc -l)]SL " # print number of symlinks
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
#PS1+="\$(git branch 2> /dev/null | grep '^*' | colrm 1 2 | xargs -I BRANCH echo -n \"( BRANCH )\")" 
PS1+="\$(git branch --show-current 2> /dev/null | xargs -I BRANCH echo -n \"( BRANCH )\")"
PS1+="${FMT_RESET}${FG_WHITE}" # print current git branch
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
PS1+="\$(git status -s 2> /dev/null | grep '^A' | wc -l | sed 's/^0//' | xargs -I AD echo -n \" A(AD)\")" 
PS1+="${FMT_RESET}${FG_WHITE}" # print current git branch
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
PS1+="\$(git status -s 2> /dev/null | grep '^M' | wc -l | sed 's/^0//' | xargs -I MD echo -n \" M(MD)\")"
PS1+="${FMT_RESET}${FG_WHITE}" # print current git branch
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
PS1+="\$(git status -s 2> /dev/null | grep '^ M' | wc -l | sed 's/^0//' | xargs -I UD echo -n \" UM(UD)\")" 
PS1+="${FMT_RESET}${FG_WHITE}"
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
PS1+="\$(git status -s 2> /dev/null | grep '^?' | wc -l | sed 's/^0//' | xargs -I UK echo -n \" U(UK)\")" 
PS1+="${FMT_RESET}${FG_WHITE}"

PS1+="${FG_WHITE} - [${FG_YELLOW}\t${FG_WHITE}]${FMT_RESET}\n" # end last container (either FILES or BRANCH)
PS1+="${FG_WHITE}${DES[1]} " # end arrow to prompt
PS1+="\[\e[1;37m\]${FG_CYAN} \$ ${FMT_RESET}" # print prompt
export PS1


# enable color support of ls and also add handy aliases
###############################################################################
eval "$(dircolors)"

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
###############################################################################
#if ! shopt -oq posix; then
#  if [ -f /usr/share/bash-completion/bash_completion ]; then
#    . /usr/share/bash-completion/bash_completion
#  elif [ -f /etc/bash_completion ]; then
#    . /etc/bash_completion
#  fi
#fi
# It's enable because that's the bash way
[ -r /usr/share/bash-completion/bash_completion   ] && . /usr/share/bash-completion/bash_completion

# PIPX
eval "$(register-python-argcomplete pipx)"


# My Functions Config
BLVL="$(ps -o tty= -p$$ | sed 's/pts\///')"
[[ $BLVL -eq "1" ]] && updateDotfiles 


