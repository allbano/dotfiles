# =========================================================================== #
#                              Meu .bashrc                                    #
# =========================================================================== #

# If not running interactively, don't do anything
# Bash Form
## [[ "$-" != *i* ]] && return
#Posix Form
###############################################################################
case $- in
    *i*) ;;
      *) return;;
esac


### Modified xdg-user-dirs ###
###############################################################################
source "$HOME/.config/user-dirs.dirs"
export XDG_DATA_HOME="/home/$USER/.local/share"


# Exports and User Configs 
###############################################################################
export EDITOR="nvim"
export TERM="xterm-256color"
export MANPAGER="less -s -M -Gg"
export LS_COLOR="--color=auto"
export DOTFILES="/home/$USER/github/dotfiles"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[ -f "${DOTFILES}/bash-completion/tmux_completion" ] && source "${DOTFILES}/bash-completion/tmux_completion"
[ -f "${DOTFILES}/bash-completion/doas" ] && source "${DOTFILES}/bash-completion/doas"

# History Configs
# Remember: https://meleu.sh/bash-history
###############################################################################
# HISTCONTROL options
# ignorespace - eliminates commands that begin with a space history list.
# ignoredups - eliminate duplicate commands (from the current session)
# ignoreboth - Enable both ignoredups and ignorespace
# erasedups - eliminate duplicates from the whole list (I don't use it)
# export HISTCONTROL="$HISTCONTROL:erasedups"
export HISTCONTROL="ignoreboth"

# show a timestamp in the history command output
export HISTTIMEFORMAT="%F %T$ "

# ignore the following commands
# IGNORE="$IGNORE:"
# Path's ignore
IGNORE="cd:cd *:..:~:/etc:/usr:/var"
IGNORE="$IGNORE:github/dotfiles/:github/BANTADS/"
# Ls/exa/lsd ignore
IGNORE="$IGNORE:ls:lsd:lsd -l:lsd -la:exa:ll:l:x:xx:ll ~:l ~"
# git's ignore
IGNORE="$IGNORE:gst:ga .:gp:gl:glol:glob"
# Commands ignore
IGNORE="$IGNORE:* --help:help *:history:history *:his:his *:pwd:bg:fg:up:uy:ur:exit"
IGNORE="$IGNORE:htop:nvtop:bashtop:du:ncdu:dust:cargo:ip -c a"
IGNORE="$IGNORE:* systemctl status:neofetch:lspci:lsusb:lsblk:lsblk -f"
IGNORE="$IGNORE:alias:alias *:lvim *"
# frameworks ignore
IGNORE="$IGNORE:nvm version:ng version:npm version"
export HISTIGNORE="$IGNORE"

# append last command to the history right before next prompt
[[ "${PROMPT_COMMAND[*]}" != *'history -a'* ]] \
  && export PROMPT_COMMAND+=('history -a')

# Warning: This file is sinchronized with the file
# in the directory $HOME/github/dotfiles/bash/history_archnote
HISTFILE="$HOME/.bash_history"
export HISTSIZE=20000
export HISTFILESIZE=20000


# Aliases definitions
###############################################################################
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.
# Warning: This file is a symbolic link to
# $HOME/github/dotfiles/bash/$HOME/github/dotfiles/bash/bash_aliases
ALIASES="$HOME/.bash_aliases"
###############################################################################
if [ -f "${ALIASES}" ]; then
  source "${ALIASES}"
fi

# Shell Functions
###############################################################################
# Warning: This file is a symbolic link to
# $HOME/github/dotfiles/bash/bash_functions
FUNCTIONS="$HOME/.bash_functions"
###############################################################################
if [ -f "${FUNCSTIONS}" ]; then
  source "${FUNCTIONS}"
fi


# Shell Options 
###############################################################################
# set -o vi
shopt -s histappend
shopt -s expand_aliases
shopt -s checkwinsize
shopt -s autocd # change to named directory
shopt -s cdspell # autocorrects ced misspellings
shopt -s cmdhist # save multi-line commands in history as single line
# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s dotglob

#ignore upper and lowercase when TAB completion
#bind 'set completion-ignore-case on'


# Change window title 
###############################################################################
case "$TERM" in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|alacritty|st-256color|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac


# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
# if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
#    debian_chroot=$(cat /etc/debian_chroot)
# fi

# PS1 Construction 
###############################################################################
FMT_BOLD="\[\e[1m\]"
FMT_DIM="\[\e[2m\]"
FMT_RESET="\[\e[0m\]"
FMT_UNBOLD="\[\e[22m\]"
FMT_UNDIM="\[\e[22m\]"
FG_BLACK="\[\e[30m\]"
FG_BLUE="\[\e[34m\]"
FG_CYAN="\[\e[36m\]"
FG_GREEN="\[\e[32m\]"
FG_GREY="\[\e[37m\]"
FG_MAGENTA="\[\e[35m\]"
FG_AZUL_VIVO="\[\e[79m\]"
FG_RED="\[\e[31m\]"
FG_WHITE="\[\e[97m\]"
BG_BLACK="\[\e[40m\]"
BG_BLUE="\[\e[44m\]"
BG_CYAN="\[\e[46m\]"
BG_GREEN="\[\e[42m\]"
BG_MAGENTA="\[\e[45m\]"
BG_YELLOW="\[\e[43m\]"
BG_GREY="\[\e[48;5;242m\]"
BG_GREY10="\[\e[48;5;239m\]"


PS1="\n${FG_WHITE}\342\224\214\342\224\200" # begin arrow to prompt
PS1+="${BG_GREY10}${FG_WHITE} \u " # print username
PS1+="${BG_BLUE}${FG_WHITE} \w " # print directory
PS1+="${FG_BLUE}${BG_GREY10}${FG_WHITE} " # end DIRECTORY container / begin FILES container
PS1+="D[\$(find . -mindepth 1 -maxdepth 1 -type d | wc -l)] " # print number of folders
PS1+="A[\$(find . -mindepth 1 -maxdepth 1 -type f | wc -l)] " # print number of files
PS1+="L[\$(find . -mindepth 1 -maxdepth 1 -type l | wc -l)] " # print number of symlinks
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
#PS1+="\$(git branch 2> /dev/null | grep '^*' | colrm 1 2 | xargs -I BRANCH echo -n \"( BRANCH )\")" 
PS1+="\$(git branch 2> /dev/null | grep '^*' | colrm 1 2 | xargs -I BRANCH echo -n \"( BRANCH )\")"
PS1+="${FMT_RESET}${FG_WHITE}" # print current git branch
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
PS1+="\$(git status -s 2> /dev/null | grep '^A' | wc -l | sed 's/^0//' | xargs -I AD echo -n \" A(AD)\")" 
PS1+="${FMT_RESET}${FG_WHITE}" # print current git branch
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
PS1+="\$(git status -s 2> /dev/null | grep '^M' | wc -l | sed 's/^0//' | xargs -I MD echo -n \" M(MD)\")"
PS1+="${FMT_RESET}${FG_WHITE}" # print current git branch
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
PS1+="\$(git status -s 2> /dev/null | grep '^ M' | wc -l | sed 's/^0//' | xargs -I UD echo -n \" UM(UD)\")" 
PS1+="${FMT_RESET}${FG_WHITE}"
PS1+="${FMT_RESET}${BG_GREEN}${FG_WHITE}"
PS1+="\$(git status -s 2> /dev/null | grep '^?' | wc -l | sed 's/^0//' | xargs -I UK echo -n \" U(UK)\")" 
PS1+="${FMT_RESET}${FG_WHITE}"

PS1+=" -${FMT_RESET} ${BG_BLUE}${FG_WHITE} \H ${FMT_RESET}" # print directory

PS1+="${FG_WHITE} - ${BG_GREY}${FG_WHITE}[\t]${FMT_RESET}\n" # end last container (either FILES or BRANCH)
PS1+="${FG_WHITE}\342\224\224\342\224\200\342\224\200\342\225\274 " # end arrow to prompt
PS1+="\[\e[1;37m\]$FG_GREEN \$ $FMT_RESET" # print prompt
export PS1


# enable color support of ls and also add handy aliases
###############################################################################
eval "`dircolors`"

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls $LS_COLOR'
    alias dir='dir $LS_COLOR'
    alias grep='grep $LS_COLOR'
    alias egrep='grep -E $LS_COLOR'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
###############################################################################
#if ! shopt -oq posix; then
#  if [ -f /usr/share/bash-completion/bash_completion ]; then
#    . /usr/share/bash-completion/bash_completion
#  elif [ -f /etc/bash_completion ]; then
#    . /etc/bash_completion
#  fi
#fi
# It's enable because that's the bash way
[ -r /usr/share/bash-completion/bash_completion   ] && . /usr/share/bash-completion/bash_completion
